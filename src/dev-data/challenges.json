[
  {
    "level": "easy",
    "method": "sort",
    "emoji": "🤖",
    "title": "First in line",
    "description": "Sort the name of the students in alphabetical order - but from Z-A.",
    "data": "const arr = [\n  \"Yelp\",\n  \"Zipp It\",\n  \"Grobo\",\n  \"Aslan The Lion\",\n  \"Flipper\",\n  \"Questions Guy\",\n  \"Besserwisser\"\n];",

    "clueEmoji": "🔎",
    "clues": [
      {
        "title": "Clue",
        "clue": "It is possible to solve this challenge with one super short line of code - don't overthink it."
      },
      {
        "title": "Clue",
        "clue": "The name of the array method is in the description."
      },
      {
        "title": "Clue",
        "clue": "If you want an item to show up first in the sorted array, adjust the sorting function so it’s prioritized, like with <Code>(a - b)</Code> or <Code>(b - a)</Code>."
      }
    ],
    "solution": "arr.sort((a, b) => b - a);"
  },
  {
    "level": "easy",
    "method": "filter",
    "emoji": "🧝🏿‍♂️",
    "title": "They're fancy like that",
    "description": "From the below list of users, return an array with only the premium account holders.\n Then, print the total amount of premium users with <Code>console.log</Code>.",
    "data": "const users = [\n  { userName: 'SamwiseGamgee4ever', premium: false },\n  { userName: 'Gollum', premium: true },\n  { userName: 'L3g0lasBl0nde', premium: true },\n  { userName: 'Hobbits_have_more_fun', premium: false },\n  { userName: 'Dragonturd', premium: true }\n];",

    "clueEmoji": "🔎",
    "clues": [
      {
        "title": "Clue",
        "clue": "This array method returns a new array."
      },
      {
        "title": "Clue",
        "clue": "For the second step you'll only need the name of the array + one magic word."
      },
      {
        "title": "Clue",
        "clue": "You want to apply a condition that checks what value <Code>user.premium</Code> has."
      },
      {
        "title": "Clue",
        "clue": "The array method starts with an F."
      }
    ],
    "solution": "const vipNerds = users.filter((user) => user.premium === true);\nconsole.log(vipNerds.length);"
  },
  {
    "level": "easy",
    "method": "filter",
    "emoji": "🎸",
    "title": "Too old to die young",
    "description": "Print an array with every age that's above 27.",
    "data": "const ages = [12, 27, 89, 102, 21, 23, 54, 40, 77];",

    "clueEmoji": "🔎",
    "clues": [
      {
        "title": "Clue",
        "clue": "Think of a method that sifts through the ages, keeping only the ones you want."
      },
      {
        "title": "Clue",
        "clue": "This method is used to only return the items in an array that meet certain conditions."
      },
      {
        "title": "Clue",
        "clue": "It's like a sieve but for arrays."
      }
    ],
    "solution": "ages.filter((age) => age > 27);"
  },
  {
    "level": "mid",
    "method": "map",
    "emoji": "🌏",
    "title": "Hello world?",
    "description": "Display the username, level and active status for every user in this array. Use a template literal to print the results to the console.",
    "noteCard": {
      "title": "⭐ Extra credit: ",
      "content": "Use HTML & DOM manipulation to display the results as an unordered list (or anything you want, the sky is the limit) instead."
    },
    "data": "const superCoolUsers = [\n  { name: 'legoland', level: 12, active: true },\n  { name: 'iwannaspeaktothemanager', level: 1, active: true },\n  { name: 'coolmom68', level: 80, active: false },\n  { name: 'flapjack', level: 24, active: true },\n  { name: 'gothvibes', level: 66, active: false }\n];",
    "clueEmoji": "🔎",
    "clues": [
      {
        "title": "Clue",
        "clue": "This method returns a new array with the result of applying a callback function to each item."
      },
      {
        "title": "Clue",
        "clue": "This method accepts 1-3 arguments: the element, the index & the array itself."
      },
      {
        "title": "Clue",
        "clue": "The emoji is sort of a clue."
      }
    ],
    "solution": "superCoolUsers.map(user => { \n  console.log(\n    `${user.name},\n    ${user.level},\n    ${user.active ? 'active' : 'logged out'}`\n  )\n});"
  },
  {
    "level": "mid",
    "method": ["findIndex", "splice"],
    "emoji": "🐔",
    "title": "Flying the coop",
    "description": "This challenge should be solved as a 2-step problem. You will create a function that uses one array method per step, and returns the modified array.\n\n 1. Obtain the index of the user with ID <Code>123_thatsallfolks</Code>\n\n 2. Permanently delete them from the array. You should edit the array in place (i.e. don't return a new array, but mutate the existing one).",
    "noteCard": {
      "title": "📌 Remember: ",
      "content": "Make sure to check if the user even exists before trying to delete them."
    },
    "data": "const someDudes = [\n  { id: '777948', name: 'dudelord', pw: 'ilovemyparrot' },\n  { id: '123_thatsallfolks', name: 'quitter_bro', \n    pw: '$jdJI98dKjre12%j' },\n  { id: '411248', name: 'goblin-lyf', pw: 'itsjustaphase' },\n];",
    "clueEmoji": "🔎",
    "clues": [
      {
        "title": "Clue",
        "clue": "The first method's name consist of two words."
      },
      {
        "title": "Clue",
        "clue": "The second method name sounds kind of cool."
      },
      {
        "title": "Clue",
        "clue": "The second method accepts two arguments."
      },
      {
        "title": "Clue",
        "clue": "These two arguments mark the start and the end point."
      }
    ],
    "solution": "function deleteUser(arr, id) {\n  // Find the index\n  const index = arr.findIndex((user) => user.id === id);\n\n  // If there's no user with that id, -1 will be returned\n  if (index === -1) {\n    console.log('There is no user with this ID.');\n    return arr; // Return the unchanged array\n  }\n\n  // If the user exists, remove them permanently\n  arr.splice(index, 1);\n\n  // Return the updated array\n  return arr;\n}\n\ndeleteUser(someDudes, '123_thatsallfolks');"
  }
]
